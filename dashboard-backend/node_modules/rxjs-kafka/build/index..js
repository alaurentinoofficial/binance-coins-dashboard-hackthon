import { fromKafkaTopic } from './index.temp.js';
import { take, interval } from 'rxjs';
const EVENTHUB_HOST = 'level5.servicebus.windows.net';
const EVENTHUB_CONSUMER_GROUP = 'samu-dev';
const EVENTHUB_KEYNAME = 'ManageAll'; // 'ListenToAll';
const EVENTHUB_ACCESSKEY = 'CwYxFSggY3x9nr3KQKkArv/TmTDfvGpUTa7ey6n3uRo='; // 'dSA1S5lQ60mcGhb8MElTk0oUFTraQ0wyV3xC5kYicOc=';
const CONNECTIONSTRING = `Endpoint=sb://${EVENTHUB_HOST}/;SharedAccessKeyName=${EVENTHUB_KEYNAME};SharedAccessKey=${EVENTHUB_ACCESSKEY}`;
const PORT = 9093;
const groupId = EVENTHUB_CONSUMER_GROUP;
const cfg = {
    brokers: [`${EVENTHUB_HOST}:${PORT.toFixed(0)}`],
    ssl: true,
    sasl: {
        mechanism: 'plain',
        username: '$ConnectionString',
        password: CONNECTIONSTRING
    }
};
const { message$$: topic$$, pushMessage } = fromKafkaTopic(cfg, 'monitoring', { groupId });
topic$$
    .pipe(
//throttle(() => interval(1000)),
take(2))
    .subscribe({
    next: (x) => {
        console.log('from sub');
        console.log(x);
    },
    error: (error) => console.error(error)
});
topic$$
    .pipe(
//throttle(() => interval(2000)),
take(3))
    .subscribe({
    next: (x) => {
        console.log('from sub2');
        console.log(x);
    },
    error: (error) => console.error(error)
});
//topic$$.next('value');
//topic$$.complete(); // will disconnect producer
// or even better
interval(1000).pipe(take(5)).subscribe(pushMessage);
//# sourceMappingURL=index..js.map