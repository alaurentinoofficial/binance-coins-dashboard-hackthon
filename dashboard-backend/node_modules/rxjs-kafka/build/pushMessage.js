import { Kafka } from 'kafkajs';
import { asyncScheduler, observeOn, Subject } from 'rxjs';
const rxkfk = function (options, topic, producerOptions) {
    const kafka = new Kafka(options);
    const pushMessage$$ = new Subject();
    const pushMessageObs = function () {
        const producer = kafka.producer(producerOptions); //as Producer & { connected: boolean };
        let connected = false;
        return {
            next: async (message) => {
                const record = {
                    topic: topic,
                    messages: [{ value: JSON.stringify(message) }]
                };
                const asyncPush = async (record) => {
                    if (!connected) {
                        await producer.connect();
                        connected = true;
                    }
                    await producer.send(record);
                };
                await asyncPush(record);
            },
            error: (error) => console.error(error),
            complete: async () => {
                await producer.disconnect();
                connected = false;
            }
        };
    }.call(undefined);
    pushMessage$$.pipe(observeOn(asyncScheduler)).subscribe(pushMessageObs);
    return { pushMessage$$ }; /// return a Subject instead with the observerOn async already inside
};
export default rxkfk;
//# sourceMappingURL=pushMessage.js.map